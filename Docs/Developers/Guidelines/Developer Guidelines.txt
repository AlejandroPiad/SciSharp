SciSharp - Developer Guidelines
===============================

SciSharp is a set of libraries and tools for .NET 4 tailored for
scientific computing. It includes one main library (SciSharp.dll)
with the core API, a few smaller libraries which provide alternative
implementations that might not work on your system (for instance,
GPU acceleration), a few utilities and a lot of examples.

SciSharp is a work in progress, and it is still in a very unstable
state, so use it at your own risk. So said, we think it does
contain some helpful and mostly working tools for scientific 
computing applications that may be of interest both for researchers
in academic areas and for developers who want to spice their software
with a bit of extra magic.

It currently encompasses the following areas:

 * Algorithms on graphs, trees and other collections
 * Language Processing
 * Machine Learning
 * Numerical Optimization (exact and heuristic) 
 * Statistics and Probabilities
 * Simulation
 

Colaboration
------------

All interested developers are welcome to colaborate. 
The standard medium of colaboration is the Github repository at:
http://github.com/AlejandroPiad/SciSharp.git

The source code is versioned using Git. If you want to colaborate
you'll need to know at least enough of Git to be able to create your
commits and submit them as patches. Patches can be send either
through Github <pull request> feature or as a mail attachement
to <scisharp@apiad.net>. Please format patches using the Git
tools, and include enough information in the pull request or mail
to make a general idea of the patch content.

Colaboration can be in the form of (compilable) source code,
but also by writting examples, tutorials, or documentation in
general, and by providing services such as packaging and deployment.

Even if you are not a developer with expertise in the areas the 
project covers, such that you cannot write a new algorithm or 
data structure, you can still colaborate by using the library, and
writting documentation or examples to help others learn the how-to's.


Coding Guidelines
-----------------

Source code is written in C# using most of the standard coding
rules of the .NET community. To clarify, basic guidelines are
given here. If in doubt, check the existing source code, or ask
one of the older developers. All (compilable) source code is
located in the Source/ folder. Project wide solutions are located
in this folder root. 

Projects are located in their own folder if they are
a primary output (such as the SciSharp project itself that generates
the main library, or the SciSharp.Console project). Smaller or 
secondary projects are grouped inside a folder with a common name,
such as the Source/Implementation/ folder which contains the projects
for alternative implementations to base classes (such as GPU-enabled
algebraic operations) which have stronger requirements than the
main library (like having a GPU, or using third-party libraries).

Inside projects, all first level members (classes, enums, delegates)
should have it's own .cs file, named like the member's name. Where
necessary, a class can be made partial and split accross more than 
one file, and secondary files should be named with the class name
plus some extra information that describes the partial content.
For example, the Primes class (which contains static methods for
primality generation and testing) is splitted in two files: Primes.cs
where all methods are, and Primes16.cs which contains a static
array with all 16-bit primes. Such a big array would clutter the
Primes.cs file, and potentially slowdown IDE tools which tend to
reformat a source file when typing.

A project's file tree should exactly resemble the internal namespace
layout, with namespaces mapping to folders, and keeping the same
nesting.

Naming guidelines:
 * Classes, delegates and enums, public members (properties, methods
   and fields), non-private static members, and constants should be
   named in UpperCamelCase.
 * Private fields (instance and static) should be named in 
   lowerCamelCase.
 * Type argument for generic types should be named in UpperCamelCase 
   with a 'T' prepended, that is TUpperCamelCase.
 * Interfaces should be named in UpperCamelCase with an 'I' 
   prepended, that is IUpperCamelCase.
 * In general, no underscores (_) should be used in naming, EXCEPT 
   for enabling fluid interfaces features that ``look'' better with 
   such syntax.
   
Comments:
 * All definitions (public and non-public) should have the 
   corresponding XML comments. At least try to include <summary/>,
   all the <param .../> and the <returns/> tags.  
 * The source itself should be correctly commented as it is widely
   accepted that source code is read many more times than it is
   written. For all non-obvious lines of code, please include 
   sensible comments that explain the intended behaviour.
   
 NOTE: For descriptions that require a technical or academic language
       it is ok and even encouraged to use LaTeX math markup in
	   the comments, both XML comments and inline comments. The
	   tools for automatic documentation generation should correctly
	   deal with LaTeX source. This includes notations like $O(n)$
	   and similar.

Testing guidelines: Please do your best effort to include unit tests
that cover your contribution's functionality. Unit tests should be
organized in projects in the Source/Testing/ folder. Tests for a 
specific class (or related group of classes that implement the same
feature) should be contained in a source file named XYZTest.cs,
where XYZ is a sensible name that describes the tested features
(most commonly the tested class name). Tests are coded using the
standard .NET 4.0 testing framework, and should follow the standard
guidelines. Please do name tests with a name long enough to state the
intended testing result. Group different test classes in projects
according to the tested feature relations. 

As an example, all tests for the library collections are located in
the /Testing/SciSharp.Testing.Collections project. The tests for
the RandomizedHeap class are grouped in the RandomizedHeapTests class.

Documentation is written in different formats, according
to the desired output and intended audience. Big manuals are written
in LaTeX, Online documentation is written in HTML format (that is,
you can generate it with any tool you want that produces HTML), and
small, always changing instructions such as README files, and these
guidelines, are written in plain ASCII text, following the Markdown
markup language. All documentation source is located in the Docs/ 
folder.


Branching Model
---------------

The source code is versioned using Git. There are two main branches,
named <master> and <development>. There should be additional branches
for each release, feature or bug fix that requires more than one 
commit.

Commits should be done often and kept as small as possible in the
number of changes they comprise. Always try to make one commit for
a logical change in the source code or documentation. A logical 
change is not necessary a new feature or a bug fix, these could
require a lot of commits. If you are going to implement a new
feature, or fix a bug that is not trivial, create a new branch and
code the entire feature or fixup there. Then submit it as a patch,
and we'll look at it, and merge it to <develop> once it is completed.

Completed doesn't mean fully tested though, <develop> might have code
that doesn't work, but at least it means that you think the feature
or fixup is completed. Once it has been sanitized and checked it 
will merged into <master>. New releases will sprout from <master>
at any given point, and the release branch will only be used to
fully polish any remaining bugs. 

If you have a very small fixup (such as a missing null check)
you can code it directly into <develop> and make a single commit.
We will very probably accept it, and thank for it.

Developers that wish to will be granted write access to the
repository after sending a few patches, just so that we can confirm
your good will. It`s not a matter of distrust, but a spammer with
right access to the repository would be a disaster.


Third Party Software
--------------------

When needed, third party libraries or software can be used to provide
extra functionality. That said, the main library (SciSharp.dll) 
which provides all the core functionality should have no third party
dependencies. Specifically, we will not use third party libraries 
which provide algorithms or tools similar to our own, nor will we
code wrappers for very optimized C libraries that do everything we
do but better. SciSharp is written in C#, and all code should be
available on C#, even if a little less optimized.

Alternative implementations may be provided which do use third party
software. For example, there is an alternative implementation of the
algebraic operations (matrices and vectors) which uses GPU 
acceleration through the SlimDX framework. But all functionality
provided in this secondary library is available in a standard C#
implementation in the main library, such that if someone doesn't
want (or can't) use GPU acceleration, it can still use the software 
implementation, that albeit a lot slower, is fully functional.

Third party software needs to be licensed in such a way that allows
us to distribute their compiled binaries (or source, given the case)
with our own license. In general, any OSI aproved license should
suffice. Third party libraries will go into the Bin/Redist/ folder
to be distributed with the source code.


Ideas
-----

All ideas are welcome. SciSharp is a library that intends to be big.
Anything related to scientific computing fits here, even if outside
the very general areas we give at the beginning of the document.
If you think you have and idea we might be interested, let us know.
If you can, code it yourself and we will very probably include it,
even if we might make some changes to adapt it to the library's
coding standards, and such.